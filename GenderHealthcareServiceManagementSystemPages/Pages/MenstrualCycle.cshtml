@page
@model GenderHealthcareServiceManagementSystemPages.Pages.MenstrualCycleModel
@{
    ViewData["Title"] = "Quản lý chu kỳ kinh nguyệt";
}
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css">
    <link rel="stylesheet" href="~/css/MenstrualCycle.css" />
</head>

<main class="menstrual-cycle-page">
    <div class="container">
        <!-- Notifications -->
        @if (TempData["SuccessMessage"] != null)
        {
            <script>toastr.success('@TempData["SuccessMessage"]');</script>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <script>toastr.error('@TempData["ErrorMessage"]');</script>
        }

        <!-- Header Section -->
        <div class="page-header">
            <div class="header-badge">
                <i class="bi bi-flower1"></i>
                Sức khỏe phụ nữ
            </div>
            <h1 class="page-title">
                <span class="gradient-text">Quản lý chu kỳ kinh nguyệt</span>
            </h1>
            <p class="page-subtitle">
                Theo dõi và quản lý chu kỳ kinh nguyệt của bạn một cách khoa học và dễ dàng
            </p>
        </div>

        <!-- Current Phase Card -->
        @{
            var currentCycle = Model.CycleDTOs?.FirstOrDefault(c => c.EndDate == null || c.EndDate.Value.ToDateTime(TimeOnly.MinValue) >= DateTime.Today);
            var currentPhase = GetCurrentPhase(currentCycle);

            // Hàm ánh xạ trạng thái sang class CSS
            string GetStatusClass(string status)
            {
                return status switch
                {
                    "Trễ" => "tre",
                    "Sớm" => "som",
                    "Bình thường" => "binh-thuong",
                    "Kéo dài bất thường" => "keo-dai-bat-thuong",
                    _ => "default"
                };
            }
        }

        @if (currentPhase != null || !string.IsNullOrEmpty(Model.CurrentCycleStatus))
        {
            <div class="current-phase-card">
                <div class="phase-info">
                    @if (currentPhase != null)
                    {
                        <div class="phase-icon @currentPhase.ColorClass">
                            <i class="@currentPhase.Icon"></i>
                        </div>
                        <div class="phase-details">
                            <h3>Giai đoạn hiện tại</h3>
                            <p class="phase-name">@currentPhase.Name</p>
                            <p class="phase-description">@currentPhase.Description</p>
                            @if (Model.PredictedCycleEnd != null && currentCycle?.EndDate == null)
                            {
                                <p class="phase-description">Dự đoán kết thúc: @Model.PredictedCycleEnd?.ToString("dd/MM/yyyy")</p>
                            }
                            @if (!string.IsNullOrEmpty(Model.CurrentCycleStatus) && Model.CurrentCycleStatus != "Không đủ dữ liệu" && Model.CurrentCycleStatus != "Không có chu kỳ đang diễn ra")
                            {
                                <p class="phase-description">Phân tích chu kỳ: <span class="status-text @GetStatusClass(Model.CurrentCycleStatus)">@Model.CurrentCycleStatus</span></p>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="phase-details">
                            <h3>Phân tích chu kỳ đang diễn ra</h3>
                            <p class="phase-description">
                                @(Model.CurrentCycleStatus == "Không đủ dữ liệu" ? "Chưa có dữ liệu chu kỳ để phân tích." :
                                    Model.CurrentCycleStatus == "Không có chu kỳ đang diễn ra" ? "Hiện tại không có chu kỳ đang diễn ra." :
                                    $"Trạng thái: {Model.CurrentCycleStatus}")
                            </p>
                            @if (!string.IsNullOrEmpty(Model.CurrentCycleStatus) && Model.CurrentCycleStatus != "Không đủ dữ liệu" && Model.CurrentCycleStatus != "Không có chu kỳ đang diễn ra")
                            {
                                <p class="phase-description"><span class="status-text @GetStatusClass(Model.CurrentCycleStatus)">@Model.CurrentCycleStatus</span></p>
                            }
                        </div>
                    }
                </div>
                <div class="reminder-info">
                    <div class="reminder-label">
                        <i class="bi bi-bell"></i>
                        Nhắc nhở tiếp theo
                    </div>
                    <p class="reminder-time">@(currentCycle?.PillReminderTime?.ToString("HH:mm") ?? "không có")</p>
                    <p class="reminder-desc">Uống thuốc tránh thai</p>
                </div>
            </div>
        }

        <!-- Predicted Next Cycle -->
        @if (Model.PredictedNextCycle != null)
        {
            <div class="alert alert-info text-center mb-4">
                Chu kỳ tiếp theo dự kiến: @Model.PredictedNextCycle?.ToString("dd/MM/yyyy")
            </div>
        }

        <!-- Cycle Phases Overview -->
        <div class="phases-overview">
            <div class="phase-card menstruation @(currentPhase?.Name == "Kinh nguyệt" ? "active" : "")">
                <div class="phase-icon-small red-gradient">
                    <i class="bi bi-droplet"></i>
                </div>
                <h4>Kinh nguyệt</h4>
                <p>Ngày 1-5</p>
            </div>
            <div class="phase-card follicular @(currentPhase?.Name == "Nang trứng phát triển" ? "active" : "")">
                <div class="phase-icon-small yellow-gradient">
                    <i class="bi bi-sun"></i>
                </div>
                <h4>Nang trứng phát triển</h4>
                <p>Ngày 6-13</p>
            </div>
            <div class="phase-card ovulation @(currentPhase?.Name == "Rụng trứng" ? "active" : "")">
                <div class="phase-icon-small purple-gradient">
                    <i class="bi bi-stars"></i>
                </div>
                <h4>Rụng trứng</h4>
                <p>Ngày 14</p>
            </div>
            <div class="phase-card luteal @(currentPhase?.Name == "Hoàng thể" ? "active" : "")">
                <div class="phase-icon-small blue-gradient">
                    <i class="bi bi-moon"></i>
                </div>
                <h4>Hoàng thể</h4>
                <p>Ngày 15-28</p>
            </div>
        </div>

        <!-- Add New Cycle Button -->
        <div class="add-cycle-section">
            <button class="btn btn-add-cycle" data-bs-toggle="modal" data-bs-target="#cycleModal" onclick="resetModal()">
                <i class="bi bi-plus-circle"></i>
                Thêm chu kỳ mới
            </button>
        </div>

        <!-- Cycles List -->
        @if (Model.CycleDTOs != null && Model.CycleDTOs.Any())
        {
            <div class="cycles-list">
                @foreach (var cycle in Model.CycleDTOs)
                {
                    <div class="cycle-card">
                        <div class="cycle-header">
                            <div class="cycle-info">
                                <div class="cycle-icon">
                                    <i class="bi bi-calendar-heart"></i>
                                </div>
                                <div class="cycle-details">
                                    <h3>Chu kỳ @(cycle.StartDate?.ToString("dd/MM/yyyy"))</h3>
                                    <p>Độ dài: @(CalculateCycleLength(cycle)) ngày</p>
                                </div>
                            </div>
                            <div class="cycle-actions">
                                @if (cycle.EndDate == null || cycle.EndDate.Value.ToDateTime(TimeOnly.MinValue) >= DateTime.Today)
                                {
                                    <span class="status-badge current">
                                        <i class="bi bi-heart"></i>
                                        Hiện tại
                                    </span>
                                }
                                else
                                {
                                    <span class="status-badge completed">
                                        <i class="bi bi-check-circle"></i>
                                        Hoàn thành
                                    </span>
                                }
                                <button class="btn btn-edit" onclick="editCycle(@cycle.CycleId)">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                <button class="btn btn-delete" onclick="deleteCycle(@cycle.CycleId)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>

                        <div class="cycle-data">
                            <div class="data-item start-date">
                                <div class="data-header">
                                    <i class="bi bi-droplet"></i>
                                    <span>Bắt đầu</span>
                                </div>
                                <p>@(cycle.StartDate?.ToString("dd/MM/yyyy"))</p>
                            </div>
                            <div class="data-item end-date">
                                <div class="data-header">
                                    <i class="bi bi-calendar"></i>
                                    <span>Kết thúc</span>
                                </div>
                                <p>@(cycle.EndDate?.ToString("dd/MM/yyyy") ?? (cycle == currentCycle && Model.PredictedCycleEnd != null ? $"Dự đoán: {Model.PredictedCycleEnd?.ToString("dd/MM/yyyy")}" : "-"))</p>
                            </div>
                            <div class="data-item ovulation-date">
                                <div class="data-header">
                                    <i class="bi bi-stars"></i>
                                    <span>Rụng trứng</span>
                                </div>
                                <p>@(cycle.OvulationDate?.ToString("dd/MM/yyyy") ?? "-")</p>
                            </div>
                            <div class="data-item pill-time">
                                <div class="data-header">
                                    <i class="bi bi-clock"></i>
                                    <span>Nhắc thuốc</span>
                                </div>
                                <p>@(cycle.PillReminderTime?.ToString("HH:mm") ?? "-")</p>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(cycle.Notes))
                        {
                            <div class="cycle-notes">
                                <div class="notes-header">
                                    <i class="bi bi-info-circle"></i>
                                    <span>Ghi chú</span>
                                </div>
                                <p>@cycle.Notes</p>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Cycle Calendar -->
            <div id="cycleCalendar" class="bg-white/80 backdrop-blur-lg rounded-xl shadow-lg p-4 mx-auto max-w-full mb-5"></div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-calendar-heart"></i>
                </div>
                <h3>Chưa có chu kỳ nào được ghi lại</h3>
                <p>Hãy bắt đầu theo dõi chu kỳ kinh nguyệt của bạn ngay hôm nay</p>
                <button class="btn btn-add-first" data-bs-toggle="modal" data-bs-target="#cycleModal" onclick="resetModal()">
                    <i class="bi bi-plus-circle"></i>
                    Thêm chu kỳ đầu tiên
                </button>
            </div>
        }

        <!-- Health Tips -->
        <div class="health-tips">
            <div class="tips-header">
                <i class="bi bi-heart"></i>
                <h2>Mẹo chăm sóc sức khỏe</h2>
                <p>Những lời khuyên hữu ích cho chu kỳ kinh nguyệt khỏe mạnh</p>
            </div>
            <div class="tips-grid">
                <div class="tip-item">
                    <div class="tip-icon">
                        <i class="bi bi-droplet"></i>
                    </div>
                    <h3>Uống đủ nước</h3>
                    <p>Duy trì 8-10 ly nước mỗi ngày để giảm thiểu chuột rút</p>
                </div>
                <div class="tip-item">
                    <div class="tip-icon">
                        <i class="bi bi-sun"></i>
                    </div>
                    <h3>Tập thể dục nhẹ</h3>
                    <p>Yoga và đi bộ giúp giảm đau và cải thiện tâm trạng</p>
                </div>
                <div class="tip-item">
                    <div class="tip-icon">
                        <i class="bi bi-moon"></i>
                    </div>
                    <h3>Ngủ đủ giấc</h3>
                    <p>7-9 tiếng ngủ mỗi đêm để cân bằng hormone tự nhiên</p>
                </div>
            </div>
        </div>

        <!-- Modal: Add/Edit Cycle -->
        <div class="modal fade" id="cycleModal" tabindex="-1" aria-labelledby="cycleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content cycle-modal">
                    <form method="post" asp-page-handler="SaveCycle" id="cycleForm">
                        @Html.AntiForgeryToken()
                        <div class="modal-header">
                            <h5 class="modal-title" id="cycleModalLabel">
                                <i class="bi bi-calendar-heart"></i>
                                <span id="modalTitle">@((Model.CycleModel.CycleId > 0) ? "Cập nhật chu kỳ" : "Thêm chu kỳ mới")</span>
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng" onclick="confirmCancel()"></button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" asp-for="CycleModel.CycleId" id="cycleId" />

                            <div class="form-grid">
                                <div class="form-group">
                                    <label class="form-label required">
                                        <i class="bi bi-droplet"></i>
                                        Ngày bắt đầu
                                    </label>
                                    <input type="date" class="form-control" asp-for="CycleModel.StartDate" id="CycleModel_StartDate" required />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="bi bi-calendar"></i>
                                        Ngày kết thúc
                                    </label>
                                    <input type="date" class="form-control" asp-for="CycleModel.EndDate" id="CycleModel_EndDate" />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="bi bi-stars"></i>
                                        Ngày rụng trứng
                                    </label>
                                    <input type="date" class="form-control" asp-for="CycleModel.OvulationDate" id="CycleModel_OvulationDate" />
                                </div>
                                <div class="form-group">
                                    <label class="form-label">
                                        <i class="bi bi-clock"></i>
                                        Giờ nhắc uống thuốc
                                    </label>
                                    <input type="time" class="form-control" asp-for="CycleModel.PillReminderTime" id="CycleModel_PillReminderTime" />
                                </div>
                            </div>

                            <div class="form-group full-width">
                                <label class="form-label">
                                    <i class="bi bi-info-circle"></i>
                                    Ghi chú
                                </label>
                                <textarea class="form-control" asp-for="CycleModel.Notes" id="CycleModel_Notes" rows="3"
                                          placeholder="Ghi chú về triệu chứng, cảm giác hoặc thông tin khác..."></textarea>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-cancel" data-bs-dismiss="modal" onclick="confirmCancel()">Hủy</button>
                            <button type="submit" class="btn btn-save">
                                <i class="bi bi-check-circle"></i>
                                <span id="saveButtonText">Lưu</span>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <!-- Thêm FullCalendar -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById('cycleForm');

            if (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        alert('Vui lòng điền đầy đủ các trường bắt buộc.');
                        return;
                    }

                    const startDate = document.getElementById('CycleModel_StartDate').value;
                    const endDate = document.getElementById('CycleModel_EndDate').value;
                    if (endDate && new Date(endDate) < new Date(startDate)) {
                        event.preventDefault();
                        alert('Ngày kết thúc không được nhỏ hơn ngày bắt đầu.');
                        return;
                    }

                    event.preventDefault();

                    const formData = new FormData(form);
                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => {
                            if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                            return response.json();
                        })
                        .then(res => {
                            if (res && res.success) {
                                alert(res.message || 'Chu kỳ đã được lưu thành công!');
                                const modal = bootstrap.Modal.getInstance(document.getElementById('cycleModal'));
                                if (modal) modal.hide();
                                setTimeout(() => location.reload(), 500);
                            } else {
                                alert(res?.message || 'Lỗi không xác định từ server.');
                            }
                        })
                        .catch(error => {
                            console.error('Lỗi fetch:', error);
                            alert('Lỗi khi gửi dữ liệu: ' + error.message);
                        });
                });
            }

            window.editCycle = function (id) {
                fetch(`?handler=GetCycle&id=${id}`)
                    .then(response => {
                        if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                        return response.json();
                    })
                    .then(res => {
                        if (res && res.success) {
                            const cycle = res.data;

                            document.getElementById('cycleId').value = cycle.cycleId || 0;
                            document.getElementById('CycleModel_StartDate').value = cycle.startDate?.split('T')[0] || '';
                            document.getElementById('CycleModel_EndDate').value = cycle.endDate?.split('T')[0] || '';
                            document.getElementById('CycleModel_OvulationDate').value = cycle.ovulationDate?.split('T')[0] || '';
                            document.getElementById('CycleModel_PillReminderTime').value = cycle.pillReminderTime || '';
                            document.getElementById('CycleModel_Notes').value = cycle.notes || '';

                            document.getElementById('modalTitle').textContent = 'Cập nhật chu kỳ';
                            document.getElementById('saveButtonText').textContent = 'Cập nhật';
                            new bootstrap.Modal(document.getElementById('cycleModal')).show();
                        } else {
                            alert(res?.message || 'Không thể tải dữ liệu chu kỳ.');
                        }
                    })
                    .catch(error => {
                        console.error('Lỗi khi tải chu kỳ:', error);
                        alert('Lỗi khi tải chu kỳ: ' + error.message);
                    });
            };

            window.resetModal = function () {
                const form = document.getElementById('cycleForm');
                if (form) {
                    form.reset();
                    document.getElementById('cycleId').value = '0';
                    document.getElementById('modalTitle').textContent = 'Thêm chu kỳ mới';
                    document.getElementById('saveButtonText').textContent = 'Lưu';
                }
            };

            window.confirmCancel = function () {
                const form = document.getElementById('cycleForm');
                if (form) {
                    const inputs = form.querySelectorAll('input, textarea');
                    let hasData = Array.from(inputs).some(input => input.value && input.value.trim() !== '');

                    if (hasData) {
                        if (!confirm('Bạn có chắc chắn muốn hủy? Dữ liệu đã nhập sẽ bị xóa.')) return;
                    }

                    form.reset();
                }
            };

            window.deleteCycle = function (id) {
                if (confirm("Bạn có chắc chắn muốn xóa chu kỳ này?")) {
                    window.location.href = `?handler=Delete&id=${id}`;
                }
            };

            // Lịch chu kỳ
            const cycles = @Html.Raw(Json.Serialize(Model.CycleDTOs));
            const currentCycleStatus = '@Model.CurrentCycleStatus';
            if (cycles && cycles.length > 0) {
                const calendarEl = document.getElementById('cycleCalendar');
                const calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    locale: 'vi',
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,dayGridWeek'
                    },
                    events: cycles.flatMap(cycle => {
                        const events = [];
                        if (cycle.startDate) {
                            const startDate = new Date(cycle.startDate);
                            // Sự kiện cho ngày bắt đầu chu kỳ
                            events.push({
                                title: 'Bắt đầu chu kỳ',
                                start: startDate,
                                classNames: ['bg-gradient-to-r from-red-400 to-pink-500'],
                                extendedProps: {
                                    cycleId: cycle.cycleId,
                                    notes: cycle.notes || ''
                                }
                            });

                            // Sự kiện cho giai đoạn kinh nguyệt
                            for (let i = 0; i < 5 && (!cycle.endDate || i <= (new Date(cycle.endDate) - startDate) / (1000 * 60 * 60 * 24)); i++) {
                                const date = new Date(startDate);
                                date.setDate(startDate.getDate() + i);
                                events.push({
                                    title: 'Kinh nguyệt',
                                    start: date,
                                    classNames: ['bg-gradient-to-r from-red-400 to-pink-500'],
                                    display: 'background'
                                });
                            }

                            // Sự kiện cho ngày rụng trứng
                            if (cycle.ovulationDate) {
                                events.push({
                                    title: 'Rụng trứng',
                                    start: cycle.ovulationDate,
                                    classNames: ['bg-gradient-to-r from-purple-400 to-pink-500'],
                                    extendedProps: {
                                        cycleId: cycle.cycleId
                                    }
                                });
                            }

                            // Sự kiện cho ngày kết thúc (nếu có)
                            if (cycle.endDate) {
                                events.push({
                                    title: 'Kết thúc chu kỳ',
                                    start: cycle.endDate,
                                    classNames: ['bg-gradient-to-r from-blue-400 to-indigo-500'],
                                    extendedProps: {
                                        cycleId: cycle.cycleId
                                    }
                                });
                            }
                        }
                        return events;
                    }),
                    eventClick: function(info) {
                        const cycleId = info.event.extendedProps.cycleId;
                        const notes = info.event.extendedProps.notes || 'Không có ghi chú';
                        alert(`Chu kỳ: ${info.event.title}\nNgày: ${info.event.start.toLocaleDateString('vi-VN')}\nGhi chú: ${notes}`);
                    },
                    eventDidMount: function(info) {
                        // Thêm trạng thái chu kỳ cho ngày hiện tại
                        if (currentCycleStatus && info.event.start.toDateString() === new Date().toDateString()) {
                            const statusClass = currentCycleStatus === 'Trễ' ? 'tre' :
                                               currentCycleStatus === 'Sớm' ? 'som' :
                                               currentCycleStatus === 'Bình thường' ? 'binh-thuong' :
                                               currentCycleStatus === 'Kéo dài bất thường' ? 'keo-dai-bat-thuong' : 'default';
                            info.el.classList.add(statusClass);
                        }
                    }
                });
                calendar.render();
            }
        });
    </script>
}

@functions {
    public class PhaseInfo
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Icon { get; set; }
        public string ColorClass { get; set; }
    }

    private PhaseInfo GetCurrentPhase(BusinessObjects.Models.DTOs.MenstrualCycleDTO currentCycle)
    {
        if (currentCycle == null || currentCycle.StartDate == null) return null;

        var today = DateTime.Today;
        var startDate = currentCycle.StartDate.Value.ToDateTime(TimeOnly.MinValue);
        var daysSinceStart = (today - startDate).Days;

        if (daysSinceStart <= 5)
            return new PhaseInfo { Name = "Kinh nguyệt", Description = "Ngày 1-5", Icon = "bi-droplet", ColorClass = "red-gradient" };
        if (daysSinceStart <= 13)
            return new PhaseInfo { Name = "Nang trứng phát triển", Description = "Ngày 6-13", Icon = "bi-sun", ColorClass = "yellow-gradient" };
        if (daysSinceStart <= 15)
            return new PhaseInfo { Name = "Rụng trứng", Description = "Ngày 14", Icon = "bi-stars", ColorClass = "purple-gradient" };

        return new PhaseInfo { Name = "Hoàng thể", Description = "Ngày 15-28", Icon = "bi-moon", ColorClass = "blue-gradient" };
    }

    private int CalculateCycleLength(BusinessObjects.Models.DTOs.MenstrualCycleDTO cycle)
    {
        if (cycle.StartDate == null) return 0;
        if (cycle.EndDate == null) return (DateTime.Today - cycle.StartDate.Value.ToDateTime(TimeOnly.MinValue)).Days + 1;

        return (cycle.EndDate.Value.ToDateTime(TimeOnly.MinValue) - cycle.StartDate.Value.ToDateTime(TimeOnly.MinValue)).Days + 1;
    }
}
