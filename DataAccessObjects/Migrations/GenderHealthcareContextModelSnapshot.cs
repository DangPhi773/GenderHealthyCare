// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessObjects.Migrations
{
    [DbContext(typeof(GenderHealthcareContext))]
    partial class GenderHealthcareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BlogId")
                        .HasName("PK__Blog__2975AA2849F7A4FE");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Clinic", b =>
                {
                    b.Property<int>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clinic_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.HasKey("ClinicId")
                        .HasName("PK__Clinic__A0C8D19B9D0B187E");

                    b.ToTable("Clinic", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ConsultantInfo", b =>
                {
                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("int")
                        .HasColumnName("experience_years");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("qualifications");

                    b.Property<string>("Specialization")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("specialization");

                    b.HasKey("ConsultantId")
                        .HasName("PK__Consulta__680695C48048D0A4");

                    b.ToTable("ConsultantInfo", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consultation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_time");

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MeetingLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("meeting_link");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ConsultationId")
                        .HasName("PK__Consulta__650FE0FBB43EB8B4");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<int?>("ConsultationId")
                        .HasColumnType("int")
                        .HasColumnName("consultation_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback_text");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<int?>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("PK__Feedback__7A6B2B8C73DE0888");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.MenstrualCycle", b =>
                {
                    b.Property<int>("CycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cycle_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CycleId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<DateOnly?>("OvulationDate")
                        .HasColumnType("date")
                        .HasColumnName("ovulation_date");

                    b.Property<TimeOnly?>("PillReminderTime")
                        .HasColumnType("time")
                        .HasColumnName("pill_reminder_time");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CycleId")
                        .HasName("PK__Menstrua__5D955881C4465051");

                    b.HasIndex("UserId");

                    b.ToTable("MenstrualCycle", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answer_text");

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime")
                        .HasColumnName("answered_at");

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__2EC2154903394F92");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BusinessObjects.Models.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reminder_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int?>("CycleId")
                        .HasColumnType("int")
                        .HasColumnName("cycle_id");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<DateTime>("ReminderTime")
                        .HasColumnType("datetime")
                        .HasColumnName("reminder_time");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("reminder_type");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReminderId")
                        .HasName("PK__Reminder__E27A362831954370");

                    b.HasIndex("CycleId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("GeneratedBy")
                        .HasColumnType("int")
                        .HasColumnName("generated_by");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ReportData")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("report_data");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("report_type");

                    b.HasKey("ReportId")
                        .HasName("PK__Reports__779B7C58D022B354");

                    b.HasIndex("GeneratedBy");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int?>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("price");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__3E0DB8AF1C8C5C85");

                    b.HasIndex("ConsultantId");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("test_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_time");

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cancel_reason");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("result");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TestId")
                        .HasName("PK__Tests__F3FF1C026A3B788C");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F4F19A88E");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164289B1418")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC57270882F4A")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("history_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateTime?>("ActionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("action_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ActionId")
                        .HasColumnType("int")
                        .HasColumnName("action_id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("action_type");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("HistoryId")
                        .HasName("PK__UserHist__096AA2E9F19E0CB4");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Blog", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Blog__author_id__440B1D61");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("BusinessObjects.Models.ConsultantInfo", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Consultant")
                        .WithOne("ConsultantInfo")
                        .HasForeignKey("BusinessObjects.Models.ConsultantInfo", "ConsultantId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultan__consu__693CA210");

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("BusinessObjects.Models.Consultation", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Consultant")
                        .WithMany("ConsultationConsultants")
                        .HasForeignKey("ConsultantId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultat__consu__5812160E");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("ConsultationUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Consultat__user___571DF1D5");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Consultant")
                        .WithMany("FeedbackConsultants")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK__Feedback__consul__6EF57B66");

                    b.HasOne("BusinessObjects.Models.Consultation", "Consultation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ConsultationId")
                        .HasConstraintName("FK_Feedback_Consultation");

                    b.HasOne("BusinessObjects.Models.Service", "Service")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Feedback__servic__6FE99F9F");

                    b.HasOne("BusinessObjects.Models.Test", "Test")
                        .WithMany("Feedbacks")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_Feedback_Test");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("FeedbackUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__user_i__6E01572D");

                    b.Navigation("Consultant");

                    b.Navigation("Consultation");

                    b.Navigation("Service");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.MenstrualCycle", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("MenstrualCycles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Menstrual__user___4AB81AF0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Question", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Consultant")
                        .WithMany("QuestionConsultants")
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK__Questions__consu__5EBF139D");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("QuestionUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Questions__user___5DCAEF64");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Reminder", b =>
                {
                    b.HasOne("BusinessObjects.Models.MenstrualCycle", "Cycle")
                        .WithMany("Reminders")
                        .HasForeignKey("CycleId")
                        .HasConstraintName("FK__Reminders__cycle__5165187F");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Reminders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Reminders__user___5070F446");

                    b.Navigation("Cycle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Report", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "GeneratedByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("GeneratedBy")
                        .HasConstraintName("FK__Reports__generat__797309D9");

                    b.Navigation("GeneratedByNavigation");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .HasConstraintName("FK_Service_Users_ConsultantId");

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("BusinessObjects.Models.Test", b =>
                {
                    b.HasOne("BusinessObjects.Models.Service", "Service")
                        .WithMany("Tests")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Tests__service_i__656C112C");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Tests__user_id__6477ECF3");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.UserHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserHisto__user___74AE54BC");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Consultation", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Models.MenstrualCycle", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("BusinessObjects.Models.Test", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ConsultantInfo");

                    b.Navigation("ConsultationConsultants");

                    b.Navigation("ConsultationUsers");

                    b.Navigation("FeedbackConsultants");

                    b.Navigation("FeedbackUsers");

                    b.Navigation("MenstrualCycles");

                    b.Navigation("QuestionConsultants");

                    b.Navigation("QuestionUsers");

                    b.Navigation("Reminders");

                    b.Navigation("Reports");

                    b.Navigation("Tests");

                    b.Navigation("UserHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
